# file: postgresql/tasks/configure.yml

- name: PostgreSQL | Make sure the postgres data directory exists
  file:
    path: "{{postgresql_data_directory}}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: 0700
  register: pgdata_dir_exist

- name: PostgreSQL | Make sure the postgres log directory exists
  file:
    path: "{{ postgresql_log_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    state: directory
    mode: '1755'
  register: pglog_dir_exist
  when: postgresql_log_directory != "pg_log"

- name: PostgreSQL | Ensure the locale for lc_collate and lc_ctype is generated
  become: yes
  locale_gen: name="{{ item }}" state=present
  with_items:
    - "{{ postgresql_locale }}"
    - "{{ postgresql_collate }}"
    - "{{ postgresql_ctype }}"
  when: item != 'C'

- name: PostgreSQL | Stop PostgreSQL
  service:
    name: "{{ postgresql_service_name }}"
    state: stopped
  become: yes
  when: postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Reset the cluster - drop the existing one
  shell: pg_dropcluster {{ postgresql_version }} {{ postgresql_cluster_name }}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Reset the cluster - create a new one (with specified encoding and locale)
  shell: >
    pg_createcluster --locale {{ postgresql_locale }}
    -e {{ postgresql_encoding }} --lc-collate={{ postgresql_collate }}
    --lc-ctype={{ postgresql_ctype }} -d {{ postgresql_data_directory }}
    {{ postgresql_version }} {{ postgresql_cluster_name }}
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Update systemd
  command: systemctl daemon-reload
  become: yes
  when: ansible_service_mgr == 'systemd' and postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Start PostgreSQL
  service:
    name: "{{ postgresql_service_name }}"
    state: started
  become: yes
  when:   postgresql_cluster_reset and pgdata_dir_exist.changed

- name: PostgreSQL | Verify postgresql cluster version
  command: grep ^{{ postgresql_version }}$ {{ postgresql_data_directory }}/PG_VERSION
  changed_when: false

- name: PostgreSQL | Ensure configuration directory exists
  file:
    path: "{{ postgresql_conf_directory }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0700
    state: directory

- name: PostgreSQL | Update configuration - pt. 1 (pg_hba.conf)
  template:
    src: pg_hba.conf.j2
    dest: "{{postgresql_conf_directory}}/pg_hba.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  register: postgresql_configuration_pt1

- name: PostgreSQL | Update configuration - pt. 2 (postgresql.conf)
  template:
    src: "postgresql.conf-{{ postgresql_version }}.j2"
    # if using pgtune, save the template to ".untuned"
    dest: "{{postgresql_conf_directory}}/postgresql.conf{% if postgresql_pgtune %}.untuned{% endif %}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  register: postgresql_configuration_pt2

- name: PostgreSQL | Update configuration - pt. 3 (pgtune)
  become: true
  become_user: "{{ postgresql_service_user }}"
  shell: |
    set -e
    TMPDIR=$(mktemp -d)
    pgtune --input-config=postgresql.conf.untuned\
           --output-config=$TMPDIR/postgresql.conf\
           {% if postgresql_pgtune_memory %}--memory {{postgresql_pgtune_memory|int}}{% endif %}\
           --type {{postgresql_pgtune_type|quote}}\
           {% if postgresql_pgtune_connections %}--connections {{postgresql_pgtune_connections|int}}{% endif %}\
    # Compare the current config with the one procuded by pgtune (ignoring comments/blanks)
    if diff --ignore-blank-lines \
        <(sed -e 's/#.*//' postgresql.conf) \
        <(sed -e 's/#.*//' $TMPDIR/postgresql.conf)
    then
      echo '_OK_'
    else
      cp $TMPDIR/postgresql.conf postgresql.conf
    fi
    # Cleanup
    rm $TMPDIR/postgresql.conf
    rmdir $TMPDIR
  args:
    chdir: "{{postgresql_conf_directory}}"
    executable: "/bin/bash"
  when: postgresql_pgtune
  register: postgresql_configuration_pt3
  changed_when: "'_OK_' not in postgresql_configuration_pt3.stdout"

- name: PostgreSQL | Create folder for additional configuration files
  file:
    name: "{{postgresql_conf_directory}}/conf.d"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0755

- name: PostgreSQL | Ensure the pid directory for PostgreSQL exists
  file:
    name: "{{ postgresql_pid_directory }}"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: u=rwX,g=rwXs,o=rx
  notify: restart postgresql

- name: PostgreSQL | Reload all conf files
  service:
    name: "{{ postgresql_service_name }}"
    state: reloaded
  when: postgresql_configuration_pt1.changed or postgresql_configuration_pt2.changed or postgresql_configuration_pt3.changed
